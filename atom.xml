<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiodra</title>
  
  <subtitle>Code is far away from bug with the animal protecting！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiodra.github.io/"/>
  <updated>2021-03-27T10:33:05.254Z</updated>
  <id>http://xiodra.github.io/</id>
  
  <author>
    <name>Xiodra</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker for Windows 使用 VMware Workstation</title>
    <link href="http://xiodra.github.io/posts/d8072310/"/>
    <id>http://xiodra.github.io/posts/d8072310/</id>
    <published>2019-06-03T07:31:15.000Z</published>
    <updated>2021-03-27T10:33:05.254Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>window 10 使用Docker for window 并基于 VMware环境搭建文档。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>Docker for Windows</strong> 不同于 <strong>Docker Toolbox</strong>。<strong>Docker for Windows</strong> 对系统的要求至少为<strong>Windows 10</strong> <code>专业版</code>，因为它需要<strong>Hyper-V</strong>的支持，而<strong>Dockbox Toolbox</strong>使用<strong>Oracle Virtual Box</strong>而不是<strong>Hyper-V</strong>。使用过<strong>VMware WorkStation</strong>的朋友应该知道，vm无法与<strong>hyper-v</strong>共存。那么如果我的电脑已经安装和使用VM，如何才能使用<strong>Docker for Windows</strong>呢，请看下面的讲解。</p><h1 id="工作环境"><a href="#工作环境" class="headerlink" title="工作环境"></a>工作环境</h1><ul><li>操作系统：<strong>Window 10 企业版 LTSC</strong></li><li>VMWare：<strong>VMware® Workstation 14 Pro</strong></li></ul><h1 id="安装Docker-for-Windows"><a href="#安装Docker-for-Windows" class="headerlink" title="安装Docker for Windows"></a>安装Docker for Windows</h1><p>从这个地址下载并进行安装：<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe">下载地址</a></p><p>安装过程很简单，在此我就不赘述了。</p><h1 id="安装以后的准备"><a href="#安装以后的准备" class="headerlink" title="安装以后的准备"></a>安装以后的准备</h1><p>安装完成以后，Docker for Windows 会自动运行，此时会出现提示没有启用Hyper-V，这里点击canel即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/HyperV.png"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载boot2docker-iso"><a href="#下载boot2docker-iso" class="headerlink" title="下载boot2docker.iso"></a>下载<strong>boot2docker.iso</strong></h2><p>从这个地址下载: <a href="https://github.com/boot2docker/boot2docker/releases">下载地址</a></p><p>然后将 <strong>boot2docker.iso</strong> 放在 C:\Users&lt;用户名&gt;.docker\machine\cache\，文件夹不存在就自己建立。<br><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/DockerDev.png"></p><h2 id="下载-VMware-Workstation-驱动"><a href="#下载-VMware-Workstation-驱动" class="headerlink" title="下载 VMware Workstation 驱动"></a>下载 <strong>VMware Workstation</strong> 驱动</h2><p>从这里下载 <a href="https://github.com/pecigonzalo/docker-machine-vmwareworkstation/releases/">下载地址</a> 最新版的vm驱动。此驱动非官方开发，但是也在官方的文档中有链接。</p><p>然后将 <strong>docker-machine-driver-vmwareworkstation.exe</strong> 复制到 <strong>C:\Program Files\Docker\Docker\resources\bin</strong> 下：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/VMDriver.png"></p><h1 id="安装Docker-Machine"><a href="#安装Docker-Machine" class="headerlink" title="安装Docker Machine"></a>安装<strong>Docker Machine</strong></h1><h2 id="打开VMware-Workstation"><a href="#打开VMware-Workstation" class="headerlink" title="打开VMware Workstation"></a>打开<strong>VMware Workstation</strong></h2><p>这一步是必须的！VM版本必须大于10。</p><h2 id="安装dev示例"><a href="#安装dev示例" class="headerlink" title="安装dev示例"></a>安装<code>dev</code>示例</h2><p>打开cmd，执行命令</p><p><code>docker-machine create --driver=vmwareworkstation dev</code></p><p>验证安装，执行命令</p><p><code>docker-machine ls</code></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/DockerInstall.png"></p><h2 id="激活实例"><a href="#激活实例" class="headerlink" title="激活实例"></a>激活实例</h2><p>执行命令：</p><p><code>docker-machine env dev</code></p><p>会出现如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/DockerEnv.png"></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>打开环境变量设置，对于上步中的提示设置系统环境变量：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/SystemEnv.png"></p><h1 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h1><p>使用命令登录</p><p><code>docker-machine ssh dev</code></p><p>出现如下图表示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/DockerSuccess.png"></p><h1 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h1><p>通过命令登录docker-machine</p><p>新建文件 <code>vi /etc/docker/daemon.json</code></p><p>输入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存，重启即可</p><h1 id="容器之内网独立IP访问"><a href="#容器之内网独立IP访问" class="headerlink" title="容器之内网独立IP访问"></a>容器之内网独立IP访问</h1><p>通过执行命令<code>docker-machine ls</code>找到docker容器宿主机的ip地址<code>192.168.17.130</code></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/Docker-IP.png"></p><p>进入某个Docker容器，执行命令<code>cat /etc/hosts</code>查看容器ip地址<code>172.17.0.3</code></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/Docker-Container-IP.png"></p><p>在物理机上以管理员原打开命令行，执行命令<code>route -p add 172.17.0.0 mask 255.255.255.0 192.168.17.130</code>，通过<code>route print 172.17.0.0</code>查看，效果如图</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/Route.png"></p><p>表示网段 <strong>172.17.0.0</strong> 的网段都经过 <strong>192.168.17.130</strong> 这个网关做路由，实现容器之内网独立IP访问。</p><p>如 <strong>mongo</strong> 容器为例：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/Mongo.png"></p><h1 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h1><p>因为我们使用的VM，所以我们在使用docker的时候，必须保证vm的dev示例是在运行的。</p><p>配置dev开机后天启动</p><p>新建一个 **docker_dev_run.bat **的文件，然后用编辑器打开，写下<code>&quot;C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe&quot; start &quot;C:\Users\Xiodra\.docker\machine\machines\dev\dev.vmx&quot; nogui</code>这行开启脚本。</p><p><strong><p style="color:red">注：start前面部分是你VMware的安装路径，后面到nogui部分是你Linux系统文件路径。</p></strong></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/VM.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/dev.png"></p><p>然后，我们再建一个 docker_dev_stop.bat 的文件，写下 <code>&quot;C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe&quot; stop &quot;C:\Users\Xiodra\.docker\machine\machines\dev\dev.vmx&quot; soft</code> 脚本,路径和刚才的一样。</p><p>接下来，我们就可以往Windows的 <strong>脚本(登录/注销)</strong> 添加了，<code>运行 &gt; gpedit.msc &gt; 用户配置 &gt; windows设置 &gt; 脚本(登录/注销) </code></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/Login.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/Logout.png"></p><p>此方法目前有个缺点，就是无法使用<strong>Docker for Windows</strong>的UI管理功能，但是这并不影响，通过命令我们可以完成所有的事情，所以我们在服务中，停止<strong>Docker Desktop Service</strong>，并且将其设为手动启动，避免每次开机就收到一个提示框。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;window 10 使用Docker for window 并基于 VMware环境搭建文档。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://xiodra.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Docker" scheme="http://xiodra.github.io/tags/Docker/"/>
    
      <category term="安装" scheme="http://xiodra.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>CSS模块化</title>
    <link href="http://xiodra.github.io/posts/30f4ba73/"/>
    <id>http://xiodra.github.io/posts/30f4ba73/</id>
    <published>2018-12-10T02:16:57.000Z</published>
    <updated>2021-03-27T09:04:44.765Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  CSS模块化方案整理</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h1 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h1><p>CSS 是前端领域中进化最慢的一块。由于 ES2015/2016 的快速普及和 Babel/Webpack 等工具的迅猛发展，CSS 被远远甩在了后面，逐渐成为大型项目工程化的痛点。也变成了前端走向彻底模块化前必须解决的难题。</p><p>CSS 模块化的解决方案有很多，但主要有两类。一类是彻底抛弃 CSS，使用 JS 或 JSON 来写样式。<a href="https://github.com/FormidableLabs/radium">Radium</a>，<a href="https://github.com/jsxstyle/jsxstyle">jsxstyle</a>，<a href="https://github.com/js-next/react-style">react-style</a> 属于这一类。优点是能给 CSS 提供 JS 同样强大的模块化能力；缺点是不能利用成熟的 CSS 预处理器（或后处理器） Sass/Less/PostCSS，<code>:hover</code> 和 <code>:active</code> 伪类处理起来复杂。另一类是依旧使用 CSS，但使用 JS 来管理样式依赖，代表是 <a href="https://github.com/css-modules/css-modules">CSS Modules</a>。CSS Modules 能最大化地结合现有 CSS 生态和 JS 模块化能力，API 简洁到几乎零学习成本。发布时依旧编译出单独的 JS 和 CSS。它并不依赖于 React，只要你使用 Webpack，可以在 Vue/Angular/jQuery 中使用。</p><h2 id="CSS-模块化遇到了哪些问题？"><a href="#CSS-模块化遇到了哪些问题？" class="headerlink" title="CSS 模块化遇到了哪些问题？"></a>CSS 模块化遇到了哪些问题？</h2><p>CSS 模块化重要的是要解决好两个问题：CSS 样式的导入和导出。灵活按需导入以便复用代码；导出时要能够隐藏内部作用域，以免造成全局污染。Sass/Less/PostCSS 等前仆后继试图解决 CSS 编程能力弱的问题，结果它们做的也确实优秀，但这并没有解决模块化最重要的问题。Facebook 工程师 Vjeux 首先抛出了 React 开发中遇到的一系列 CSS 相关问题。总结如下：</p><ul><li><p>1、全局污染</p><p>CSS 使用全局选择器机制来设置样式，优点是方便重写样式。缺点是所有的样式都是全局生效，样式可能被错误覆盖，因此产生了非常丑陋的 !important，甚至 inline !important 和复杂的选择器权重计数表，提高犯错概率和使用成本。Web Components 标准中的 Shadow DOM 能彻底解决这个问题，但它的做法有点极端，样式彻底局部化，造成外部无法重写样式，损失了灵活性。</p></li><li><p>2、命名混乱</p><p>由于全局污染的问题，多人协同开发时为了避免样式冲突，选择器越来越复杂，容易形成不同的命名风格，很难统一。样式变多后，命名将更加混乱。</p></li><li><p>3、依赖管理不彻底</p><p>组件应该相互独立，引入一个组件时，应该只引入它所需要的 CSS 样式。但现在的做法是除了要引入 JS，还要再引入它的 CSS，而且 Saas/Less 很难实现对每个组件都编译出单独的 CSS，引入所有模块的 CSS 又造成浪费。JS 的模块化已经非常成熟，如果能让 JS 来管理 CSS 依赖是很好的解决办法。Webpack 的 css-loader 提供了这种能力。</p></li><li><p>4、无法共享变量</p><p>复杂组件要使用 JS 和 CSS 来共同处理样式，就会造成有些变量在 JS 和 CSS 中冗余，Sass/PostCSS/CSS 等都不提供跨 JS 和 CSS 共享变量这种能力。</p></li><li><p>5、代码压缩不彻底</p><p>由于移动端网络的不确定性，现在对 CSS 压缩已经到了变态的程度。很多压缩工具为了节省一个字节会把 ‘16px’ 转成 ‘1pc’。但对非常长的 class 名却无能为力，力没有用到刀刃上。</p></li></ul><p>上面的问题如果只凭 CSS 自身是无法解决的，如果是通过 JS 来管理 CSS 就很好解决，因此 Vjuex 给出的解决方案是完全的 CSS in JS，但这相当于完全抛弃 CSS，在 JS 中以 Object 语法来写 CSS，估计刚看到的小伙伴都受惊了。直到出现了 CSS Modules。</p><h2 id="CSS-Modules-模块化方案"><a href="#CSS-Modules-模块化方案" class="headerlink" title="CSS Modules 模块化方案"></a>CSS Modules 模块化方案</h2><p><img src="https://camo.githubusercontent.com/544dc8b41d251cb302c9ebe2f324defd0ec89e02/68747470733a2f2f696d672e616c6963646e2e636f6d2f7470732f69322f5442315968782e4c7058585858616261585858386f462e5f5658582d3830302d3237342e706e67"></p><p>CSS Modules 内部通过 <a href="https://github.com/css-modules/icss">ICSS</a> 来解决样式导入和导出这两个问题。分别对应 :import 和 :export 两个新增的伪类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:import(&quot;path&#x2F;to&#x2F;dep.css&quot;) &#123;</span><br><span class="line">  localAlias: keyFromDep;</span><br><span class="line">  &#x2F;* ... *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">:export &#123;</span><br><span class="line">  exportedKey: exportedValue;</span><br><span class="line">  &#x2F;* ... *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但直接使用这两个关键字编程太麻烦，实际项目中很少会直接使用它们，我们需要的是用 JS 来管理 CSS 的能力。结合 Webpack 的 <code>css-loader</code> 后，就可以在 CSS 中定义样式，在 JS 中导入。</p><h2 id="启用-CSS-Modules"><a href="#启用-CSS-Modules" class="headerlink" title="启用 CSS Modules"></a>启用 CSS Modules</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">css?modules&amp;localIdentName&#x3D;[name]__[local]-[hash:base64:5]</span><br></pre></td></tr></table></figure><p>加上 <code>modules</code> 即为启用，<code>localIdentName</code> 是设置生成样式的命名规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* components&#x2F;Button.css *&#x2F;</span><br><span class="line">.normal &#123; &#x2F;* normal 相关的所有样式 *&#x2F; &#125;</span><br><span class="line">.disabled &#123; &#x2F;* disabled 相关的所有样式 *&#x2F; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* components&#x2F;Button.js *&#x2F;</span><br><span class="line">import styles from &#39;.&#x2F;Button.css&#39;;</span><br><span class="line"></span><br><span class="line">console.log(styles);</span><br><span class="line"></span><br><span class="line">buttonElem.outerHTML &#x3D; &#96;&lt;button class&#x3D;$&#123;styles.normal&#125;&gt;Submit&lt;&#x2F;button&gt;&#96;</span><br></pre></td></tr></table></figure><p>生成的 HTML 是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;button--normal-abc53&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>注意到 <code>button--normal-abc53</code> 是 CSS Modules 按照 <code>localIdentName</code> 自动生成的 class 名。其中的 <code>abc53</code> 是按照给定算法生成的序列码。经过这样混淆处理后，class 名基本就是唯一的，大大降低了项目中样式覆盖的几率。同时在生产环境下修改规则，生成更短的 class 名，可以提高 CSS 的压缩率。</p><p>上例中 console 打印的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object &#123;</span><br><span class="line">  normal: &#39;button--normal-abc53&#39;,</span><br><span class="line">  disabled: &#39;button--disabled-def884&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS Modules 对 CSS 中的 class 名都做了处理，使用对象来保存原 class 和混淆后 class 的对应关系。</p><p>通过这些简单的处理，CSS Modules 实现了以下几点：</p><ul><li>所有样式都是 local 的，解决了命名冲突和全局污染问题</li><li>class 名生成规则配置灵活，可以此来压缩 class 名</li><li>只需引用组件的 JS 就能搞定组件所有的 JS 和 CSS</li><li>依然是 CSS，几乎 0 学习成本</li></ul><h2 id="样式默认局部"><a href="#样式默认局部" class="headerlink" title="样式默认局部"></a>样式默认局部</h2><p>使用了 CSS Modules 后，就相当于给每个 class 名外加加了一个 <code>:local</code>，以此来实现样式的局部化，如果你想切换到全局模式，使用对应的 <code>:global</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.normal &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 以上与下面等价 *&#x2F;</span><br><span class="line">:local(.normal) &#123;</span><br><span class="line">  color: green; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 定义全局样式 *&#x2F;</span><br><span class="line">:global(.btn) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 定义多个全局样式 *&#x2F;</span><br><span class="line">:global &#123;</span><br><span class="line">  .link &#123;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">  .box &#123;</span><br><span class="line">    color: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Compose-来组合样式"><a href="#Compose-来组合样式" class="headerlink" title="Compose 来组合样式"></a>Compose 来组合样式</h2><p>对于样式复用，CSS Modules 只提供了唯一的方式来处理 <code>:composes</code> 组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* components&#x2F;Button.css *&#x2F;</span><br><span class="line">.base &#123; &#x2F;* 所有通用的样式 *&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">.normal &#123;</span><br><span class="line">  composes: base;</span><br><span class="line">  &#x2F;* normal 其它样式 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.disabled &#123;</span><br><span class="line">  composes: base;</span><br><span class="line">  &#x2F;* disabled 其它样式 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import styles from &#39;.&#x2F;Button.css&#39;;</span><br><span class="line"></span><br><span class="line">buttonElem.outerHTML &#x3D; &#96;&lt;button class&#x3D;$&#123;styles.normal&#125;&gt;Submit&lt;&#x2F;button&gt;&#96;</span><br></pre></td></tr></table></figure><p>生成的 HTML 变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;button--base-daf62 button--normal-abc53&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>由于在 <code>.normal</code> 中 composes 了 <code>.base</code>，编译后会 normal 会变成两个 class。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* settings.css *&#x2F;</span><br><span class="line">.primary-color &#123;</span><br><span class="line">  color: #f40;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* components&#x2F;Button.css *&#x2F;</span><br><span class="line">.base &#123; &#x2F;* 所有通用的样式 *&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">.primary &#123;</span><br><span class="line">  composes: base;</span><br><span class="line">  composes: primary-color from &#39;.&#x2F;settings.css&#39;;</span><br><span class="line">  &#x2F;* primary 其它样式 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大多数项目，有了 <code>composes</code> 后已经不再需要 Sass/Less/PostCSS。但如果你想用的话，由于 <code>composes</code> 不是标准的 CSS 语法，编译时会报错。就只能使用预处理器自己的语法来做样式复用了。</p><h2 id="class-命名技巧"><a href="#class-命名技巧" class="headerlink" title="class 命名技巧"></a>class 命名技巧</h2><p>CSS Modules 的命名规范是从 <code>BEM</code> 扩展而来。<code>BEM</code> 把样式名分为 3 个级别，分别是：</p><ul><li>Block：对应模块名，如 Dialog</li><li>Element：对应模块中的节点名 Confirm Button</li><li>Modifier：对应节点相关的状态，如 disabled、highlight</li></ul><p>综上，BEM 最终得到的 class 名为 <code>dialog__confirm-button--highlight</code>。使用双符号 <code>__</code> 和 <code>--</code> 是为了和区块内单词间的分隔符区分开来。虽然看起来有点奇怪，但 BEM 被非常多的大型项目和团队采用。我们实践下来也很认可这种命名方法。</p><p>CSS Modules 中 CSS 文件名恰好对应 Block 名，只需要再考虑 Element 和 Modifier。BEM 对应到 CSS Modules 的做法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* .dialog.css *&#x2F;</span><br><span class="line">.ConfirmButton--disabled &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以不遵循完整的命名规范，使用 camelCase 的写法把 Block 和 Modifier 放到一起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* .dialog.css *&#x2F;</span><br><span class="line">.disabledConfirmButton &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何实现CSS，JS变量共享"><a href="#如何实现CSS，JS变量共享" class="headerlink" title="如何实现CSS，JS变量共享"></a>如何实现CSS，JS变量共享</h2><blockquote><p>注：CSS Modules 中没有变量的概念，这里的 CSS 变量指的是 Sass 中的变量。</p></blockquote><p>上面提到的 <code>:export</code> 关键字可以把 CSS 中的 变量输出到 JS 中。下面演示如何在 JS 中读取 Sass 变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* config.scss *&#x2F;</span><br><span class="line">$primary-color: #f40;</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  primaryColor: $primary-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* app.js *&#x2F;</span><br><span class="line">import style from &#39;config.scss&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 会输出 #F40</span><br><span class="line">console.log(style.primaryColor);</span><br></pre></td></tr></table></figure><h2 id="CSS-Modules-使用技巧"><a href="#CSS-Modules-使用技巧" class="headerlink" title="CSS Modules 使用技巧"></a>CSS Modules 使用技巧</h2><p>CSS Modules 是对现有的 CSS 做减法。为了追求<strong>简单可控</strong>，作者建议遵循如下原则：</p><ul><li>不使用选择器，只使用 class 名来定义样式</li><li>不层叠多个 class，只使用一个 class 把所有样式定义好</li><li>所有样式通过 composes 组合来实现复用</li><li>不嵌套</li></ul><p>上面两条原则相当于削弱了样式中最灵活的部分，初使用者很难接受。第一条实践起来难度不大，但第二条如果模块状态过多时，class 数量将成倍上升。</p><p>一定要知道，上面之所以称为建议，是因为 CSS Modules 并不强制你一定要这么做。听起来有些矛盾，由于多数 CSS 项目存在深厚的历史遗留问题，过多的限制就意味着增加迁移成本和与外部合作的成本。初期使用中肯定需要一些折衷。幸运的是，CSS Modules 这点做的很好：</p><p><strong>如果我对一个元素使用多个 class 呢？</strong></p><p>没问题，样式照样生效。</p><p><strong>如何我在一个 style 文件中使用同名 class 呢？</strong></p><p>没问题，这些同名 class 编译后虽然可能是随机码，但仍是同名的。</p><p><strong>如果我在 style 文件中使用伪类，标签选择器等呢？</strong></p><p>没问题，所有这些选择器将不被转换，原封不动的出现在编译后的 css 中。也就是说 CSS Modules 只会转换 class 名和 id 选择器名相关的样式。</p><p>但注意，上面 3 个“如果”尽量不要发生。</p><h2 id="CSS-Modules-结合-React-实践"><a href="#CSS-Modules-结合-React-实践" class="headerlink" title="CSS Modules 结合 React 实践"></a>CSS Modules 结合 React 实践</h2><p>在 <code>className</code> 处直接使用 css 中 <code>class</code> 名即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* dialog.css *&#x2F;</span><br><span class="line">.root &#123;&#125;</span><br><span class="line">.confirm &#123;&#125;</span><br><span class="line">.disabledConfirm &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import classNames from &#39;classnames&#39;;</span><br><span class="line">import styles from &#39;.&#x2F;dialog.css&#39;;</span><br><span class="line"></span><br><span class="line">export default class Dialog extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const cx &#x3D; classNames(&#123;</span><br><span class="line">      [styles.confirm]: !this.state.disabled,</span><br><span class="line">      [styles.disabledConfirm]: this.state.disabled</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &lt;div className&#x3D;&#123;styles.root&#125;&gt;</span><br><span class="line">      &lt;a className&#x3D;&#123;cx&#125;&gt;Confirm&lt;&#x2F;a&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，一般把组件最外层节点对应的 class 名称为 <code>root</code>。这里使用了 <a href="https://www.npmjs.com/package/classnames">classnames</a> 库来操作 <code>class</code> 名。<br>如果你不想频繁的输入 <code>styles.**</code>，可以试一下 <a href="https://github.com/gajus/react-css-modules">react-css-modules</a>，它通过高阶函数的形式来避免重复输入 <code>styles.**</code>。</p><h2 id="CSS-Modules-结合历史遗留项目实践"><a href="#CSS-Modules-结合历史遗留项目实践" class="headerlink" title="CSS Modules 结合历史遗留项目实践"></a>CSS Modules 结合历史遗留项目实践</h2><p>好的技术方案除了功能强大炫酷，还要能做到现有项目能平滑迁移。CSS Modules 在这一点上表现的非常灵活。</p><h2 id="外部如何覆盖局部样式"><a href="#外部如何覆盖局部样式" class="headerlink" title="外部如何覆盖局部样式"></a>外部如何覆盖局部样式</h2><p>当生成混淆的 class 名后，可以解决命名冲突，但因为无法预知最终 class 名，不能通过一般选择器覆盖。我们现在项目中的实践是可以给组件关键节点加上 data-role 属性，然后通过属性选择器来覆盖样式。</p><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; dialog.js</span><br><span class="line">  return &lt;div className&#x3D;&#123;styles.root&#125; data-role&#x3D;&#39;dialog-root&#39;&gt;</span><br><span class="line">      &lt;a className&#x3D;&#123;styles.disabledConfirm&#125; data-role&#x3D;&#39;dialog-confirm-btn&#39;&gt;Confirm&lt;&#x2F;a&gt;</span><br><span class="line">      ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; dialog.css</span><br><span class="line">[data-role&#x3D;&quot;dialog-root&quot;] &#123;</span><br><span class="line">  &#x2F;&#x2F; override style</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 CSS Modules 只会转变类选择器，所以这里的属性选择器不需要添加 <code>:global</code>。</p><h2 id="如何与全局样式共存"><a href="#如何与全局样式共存" class="headerlink" title="如何与全局样式共存"></a>如何与全局样式共存</h2><p>前端项目不可避免会引入 normalize.css 或其它一类全局 css 文件。使用 Webpack 可以让全局样式和 CSS Modules 的局部样式和谐共存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">module: &#123;</span><br><span class="line">  loaders: [&#123;</span><br><span class="line">    test: &#x2F;\.jsx?$&#x2F;,</span><br><span class="line">    loader: &#39;babel&#39;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    test: &#x2F;\.scss$&#x2F;,</span><br><span class="line">    exclude: path.resolve(__dirname, &#39;src&#x2F;styles&#39;),</span><br><span class="line">    loader: &#39;style!css?modules&amp;localIdentName&#x3D;[name]__[local]!sass?sourceMap&#x3D;true&#39;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    test: &#x2F;\.scss$&#x2F;,</span><br><span class="line">    include: path.resolve(__dirname, &#39;src&#x2F;styles&#39;),</span><br><span class="line">    loader: &#39;style!css!sass?sourceMap&#x3D;true&#39;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* src&#x2F;app.js *&#x2F;</span><br><span class="line">import &#39;.&#x2F;styles&#x2F;app.scss&#39;;</span><br><span class="line">import Component from &#39;.&#x2F;view&#x2F;Component&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;* src&#x2F;views&#x2F;Component.js *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 以下为组件相关样式</span><br><span class="line">import &#39;.&#x2F;Component.scss&#39;;</span><br></pre></td></tr></table></figure><p>目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── app.js</span><br><span class="line">├── styles</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   └── normalize.scss</span><br><span class="line">└── views</span><br><span class="line">    ├── Component.js</span><br><span class="line">    └── Component.scss</span><br></pre></td></tr></table></figure><p>这样所有全局的样式都放到 <code>src/styles/app.scss</code> 中引入就可以了。其它所有目录包括 <code>src/views</code> 中的样式都是局部的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS Modules 很好的解决了 CSS 目前面临的模块化难题。支持与 Sass/Less/PostCSS 等搭配使用，能充分利用现有技术积累。同时也能和全局样式灵活搭配，便于项目中逐步迁移至 CSS Modules。CSS Modules 的实现也属轻量级，未来有标准解决方案后可以低成本迁移。</p><blockquote><p>引用：<a href="https://github.com/camsong/blog/issues/5">https://github.com/camsong/blog/issues/5</a></p></blockquote><ul><li><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS module用法教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  CSS模块化方案整理&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://xiodra.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CSS" scheme="http://xiodra.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="http://xiodra.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何发布NPM模块（typescript）</title>
    <link href="http://xiodra.github.io/posts/4512cdc4/"/>
    <id>http://xiodra.github.io/posts/4512cdc4/</id>
    <published>2018-12-07T03:22:10.000Z</published>
    <updated>2021-03-27T09:12:31.443Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  发布以Typescript语言编写的NPM模块步骤整理。</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h1 id="1-如何发布模块（typescript）"><a href="#1-如何发布模块（typescript）" class="headerlink" title="1. 如何发布模块（typescript）"></a>1. 如何发布模块（typescript）</h1><h2 id="1-1-准备"><a href="#1-1-准备" class="headerlink" title="1.1. 准备"></a>1.1. 准备</h2><p>需要准备<a href="https://github.com/">Github</a>和<a href="https://www.npmjs.com/">NPM</a>账户</p><h2 id="1-2-开始"><a href="#1-2-开始" class="headerlink" title="1.2. 开始"></a>1.2. 开始</h2><h3 id="1-2-1-合理的package-json"><a href="#1-2-1-合理的package-json" class="headerlink" title="1.2.1. 合理的package.json"></a>1.2.1. 合理的<code>package.json</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;full-sample&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A sample to learn NPM.&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;dist&#x2F;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;prepare&quot;: &quot;npm run rebuild&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;tsc -p .&quot;,</span><br><span class="line">    &quot;rebuild&quot;: &quot;npm run clean &amp;&amp; npm run lint &amp;&amp; npm run build&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo See directory sources&#x2F;tests&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;rm -rf dist&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;tslint --project tslint.json&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;npm&quot;,</span><br><span class="line">    &quot;sample&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;NPM Learner &lt;me@sample.com&gt; (https:&#x2F;&#x2F;sample.com&#x2F;)&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;Apache-2.0&quot;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https:&#x2F;&#x2F;github.com&#x2F;learn-npm&#x2F;full-sample.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;learn-npm&#x2F;full-sample&#x2F;issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;learn-npm&#x2F;full-sample#readme&quot;,</span><br><span class="line">  &quot;types&quot;: &quot;.&#x2F;dist&#x2F;index.d.ts&quot;,</span><br><span class="line">  &quot;typings&quot;: &quot;.&#x2F;dist&#x2F;index.d.ts&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;sequelize&quot;: &quot;^4.24.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@types&#x2F;node&quot;: &quot;^8.0.51&quot;,</span><br><span class="line">    &quot;@types&#x2F;sequelize&quot;: &quot;^4.0.79&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^2.6.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;&#x3D;8.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-下面逐个字段解释"><a href="#1-2-2-下面逐个字段解释" class="headerlink" title="1.2.2. 下面逐个字段解释"></a>1.2.2. 下面逐个字段解释</h3><blockquote><p><strong>homepage</strong></p></blockquote><p>  指定项目的主页地址，如果没有一般可以使用项目的 GitHub 地址。</p><blockquote><p><strong>bugs.url</strong></p></blockquote><p>  指定项目的 Bug 反馈地址，一般可以用项目的 GitHub Issue 地址。</p><blockquote><p><strong>repository.url</strong> 和 <strong>repository.type</strong></p></blockquote><p>  指定项目的源码仓库地址，可以指定是 git/cvs/svn。</p><blockquote><p><strong>main</strong></p></blockquote><p>  指定 Node.js 中 require(“moduel-name”) 导入的默认文件。</p><blockquote><p><strong>keywords</strong></p></blockquote><p>  指定项目的关键词，合理设置有利于让他人发现你的项目。</p><blockquote><p><strong>engines</strong></p></blockquote><p>  设置项目对引擎的版本要求，比如 node、electron、vscode 等。</p><blockquote><p><strong>types</strong> 和 <strong>typings</strong></p></blockquote><p>  设置项目内置的 TypeScript 模块声明文件入口文件。</p><h3 id="1-2-3-scripts-字段"><a href="#1-2-3-scripts-字段" class="headerlink" title="1.2.3. scripts 字段"></a>1.2.3. scripts 字段</h3><p>scripts 字段作为单独一节解释，因为它是用于构建控制和发布控制的工具。</p><blockquote><p><strong>scripts.build</strong></p></blockquote><p>  这个允许使用 npm run build 命令直接编译 TS 代码。</p><blockquote><p><strong>scripts.lint</strong></p></blockquote><p>  这个允许使用 npm run lint 命令调用 TSLinter 对代码进行格式检查。</p><blockquote><p><strong>scripts.clean</strong></p></blockquote><p>  这个允许使用 npm run clean 命令清理编译结果。</p><blockquote><p><strong>scripts.rebuild</strong></p></blockquote><p>  这个允许使用 npm run rebuild 命令清理编译结果然后重新生成。</p><blockquote><p><strong>scripts.prepare</strong></p></blockquote><p>  这个不是给我们用的，而是 NPM 提供的钩子，这个命令会在执行 npm publish 的时候被调用。因此可以用这个钩子进行发布前构建。</p><h3 id="1-2-4-Git设置"><a href="#1-2-4-Git设置" class="headerlink" title="1.2.4. Git设置"></a>1.2.4. Git设置</h3><p>Git 应当使用 .gitignore 文件忽略那些编译结果，以及 NPM 依赖的包文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;node_modules&#x2F;</span><br><span class="line">&#x2F;dist&#x2F;</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><h3 id="1-2-5-NPM-包文件设置"><a href="#1-2-5-NPM-包文件设置" class="headerlink" title="1.2.5. NPM 包文件设置"></a>1.2.5. NPM 包文件设置</h3><p>NPM 打包发布的时候，会默认把当前目录下所有文件打包。但是 Git 仓库中，有些东西是不需要<br>发布到 NPM 的，因此我们需要使用一个文件 <code>.npmignore</code> 来忽略这些文件，常用配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;.git&#x2F;</span><br><span class="line">&#x2F;.vscode&#x2F;</span><br><span class="line">&#x2F;docs&#x2F;</span><br><span class="line">&#x2F;node_modules&#x2F;</span><br><span class="line">.gitignore</span><br><span class="line">.npmignore</span><br><span class="line">tslint.json</span><br><span class="line">tsconfig.json</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><h3 id="1-2-6-配置-tsconfig-json"><a href="#1-2-6-配置-tsconfig-json" class="headerlink" title="1.2.6. 配置 tsconfig.json"></a>1.2.6. 配置 tsconfig.json</h3><p>前面说了，假定 TypeScript 的代码在 <code>sources</code> 目录下，编译的输出目录则为 <code>dist</code>。那么需要</p><p>在 tsconfig.json 里面通过 <code>rootDir</code> 和 <code>outDir</code> 选项指定。</p><p>其次，为了让其它 TypeScript 程序能正常使用你的包，你还应该设置 <code>declaration</code> 字段为<br><code>true</code>，使之自动生成 <code>*.d.ts</code> 文件。此处我们假定模块的入口是<code> index.js</code> ，因此你必须<br>实现一个 <code>index.ts</code> 文件，作为模块的入口。</p><p>另外，如果要实现 TypeScript 源码调试，则需要开启 <code>sourceMap</code> 选项，以生成源码映射<br>文件。</p><h3 id="1-2-7-发布"><a href="#1-2-7-发布" class="headerlink" title="1.2.7 发布"></a>1.2.7 发布</h3><ul><li><p>npm login</p><p>通过命令<code>npm login</code>登陆注册的npm账户，密码及注册邮箱（<strong>邮箱必须通过验证方可发布</strong>）<br><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/npm_login.png"></p></li><li><p>npm publish</p><p>需要发布的npm包准备好，测试完毕后可以通过<code>npm publish</code>进行发布<br><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/npm_publish.png"></p></li></ul><h2 id="1-3-维护"><a href="#1-3-维护" class="headerlink" title="1.3. 维护"></a>1.3. 维护</h2><h3 id="1-3-1-版本号维护"><a href="#1-3-1-版本号维护" class="headerlink" title="1.3.1. 版本号维护"></a>1.3.1. 版本号维护</h3><blockquote><p>正常版本控制</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm version v0.1.0      # 版本号变成 0.1.0，即显式设置版本号。</span><br><span class="line">npm version patch       # 版本号从 0.1.0 变成 0.1.1，即修订版本号加一。</span><br><span class="line">npm version minor       # 版本号从 0.1.1 变成 0.2.0，即子版本号加一。</span><br><span class="line">npm version major       # 版本号从 0.2.0 变成 1.0.0，即主版本号加一。</span><br></pre></td></tr></table></figure><blockquote><p>创建“预发布版本”，也就是非稳定版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm version v1.2.3</span><br><span class="line"></span><br><span class="line"># 版本号从 1.2.3 变成 1.2.4-0，就是 1.2.4 版本的第一个预发布版本。</span><br><span class="line">npm version prepatch</span><br><span class="line"></span><br><span class="line"># 版本号从 1.2.4-0 变成 1.3.0-0，就是 1.3.0 版本的第一个预发布版本。</span><br><span class="line">npm version preminor</span><br><span class="line"></span><br><span class="line"># 版本号从 1.2.3 变成 2.0.0-0，就是 2.0.0 版本的第一个预发布版本。</span><br><span class="line">npm version premajor</span><br><span class="line"></span><br><span class="line"># 版本号从 2.0.0-0 变成 2.0.0-1，就是使预发布版本号加一。</span><br><span class="line">npm version prerelease</span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em></p></blockquote><p>version 命令默认会给你的 git 仓库自动 commit 一把，并打一个 tag。如果不想它动你的<br>git 仓库，你应该使用 –no-git-tag-version 参数</p><p><code>npm --no-git-tag-version version patch</code></p><p>可以使用如下 NPM 设置彻底禁止它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set git-tag-version false  # 不要自动打 tag</span><br><span class="line">npm config set commit-hooks false     # 不要自动 commit</span><br></pre></td></tr></table></figure><h3 id="1-3-2-使用标签"><a href="#1-3-2-使用标签" class="headerlink" title="1.3.2. 使用标签"></a>1.3.2. 使用标签</h3><p>以 TypeScript 为例，通过 <code>npm info typescript</code> 可以看到 <code>dist-tags</code> 字段有着五个<br>值，分别是 <code>latest</code>, <code>beta</code>, <code>rc</code>, <code>next</code>, <code>insiders</code>，这些都是 <code>dist-tag</code>，可以<br>称之为标签——你可以把它理解为 <code>git</code> 里面的分支。</p><p>有什么用呢？其实，我们平时用 <code>npm install xxxxxx</code> 的时候，是使用了一个潜在的选项<br><code>tag = latest</code>，可以通过 <code>npm config list -l | grep tag</code> 看到。</p><p>因此实际上是执行了 <code>npm install xxxxxx@latest</code>。也就是安装了 <code>latest</code> 这个标签<br>对应的最新版本。</p><p>不同的标签可以有不同的版本，这就方便我们发表非稳定版本到 npm 上，与稳定版本分开。<br>默认是发布到 <code>latest</code> 标签下的。</p><p>例如 <code>npm publish --tag dev</code> 就可以发布一个版本到 <code>dev</code> 标签下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  发布以Typescript语言编写的NPM模块步骤整理。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://xiodra.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NPM" scheme="http://xiodra.github.io/tags/NPM/"/>
    
      <category term="Node Module" scheme="http://xiodra.github.io/tags/Node-Module/"/>
    
      <category term="Typescript" scheme="http://xiodra.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>gulp模块打包</title>
    <link href="http://xiodra.github.io/posts/33105f49/"/>
    <id>http://xiodra.github.io/posts/33105f49/</id>
    <published>2018-12-06T07:48:33.000Z</published>
    <updated>2021-03-27T09:18:03.245Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  使用gulp打包工具打包npm模块；使用gulp-typescript打包以typescript编写的npm模块</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h1 id="使用Gulp进行模块打包"><a href="#使用Gulp进行模块打包" class="headerlink" title="使用Gulp进行模块打包"></a>使用Gulp进行模块打包</h1><h2 id="中文技术文档"><a href="#中文技术文档" class="headerlink" title="中文技术文档"></a>中文技术文档</h2><p><a href="https://www.gulpjs.com.cn/">gulp-js</a></p><h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><blockquote><p>1、全局安装 gulp：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp</span><br></pre></td></tr></table></figure><blockquote><p>2、作为项目的开发依赖（<strong>devDependencies</strong>）安装：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure><blockquote><p>3、在项目根目录下创建一个名为 <strong>gulpfile.js</strong> 的文件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;default&#39;, function() &#123;</span><br><span class="line">  &#x2F;&#x2F; 将你的默认的任务代码放在这</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用typescript语言"><a href="#使用typescript语言" class="headerlink" title="使用typescript语言"></a>使用typescript语言</h2><blockquote><p>1、除以上安装模块，还必须在项目的开发依赖（devDependencies）安装：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript gulp-typescript ts-node gulpclass</span><br></pre></td></tr></table></figure><blockquote><p>2、在项目根目录下创建一个名为 <strong>gulpfile.ts</strong> 的文件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Gulpclass, Task, SequenceTask, MergedTask &#125; from &quot;gulpclass&quot;;</span><br><span class="line"></span><br><span class="line">const gulp &#x3D; require(&quot;gulp&quot;);</span><br><span class="line">const del &#x3D; require(&quot;del&quot;);</span><br><span class="line">const sourcemaps &#x3D; require(&quot;gulp-sourcemaps&quot;);</span><br><span class="line">const uglify &#x3D; require(&#39;gulp-uglify&#39;);</span><br><span class="line">const ts &#x3D; require(&quot;gulp-typescript&quot;);</span><br><span class="line"></span><br><span class="line">@Gulpclass()</span><br><span class="line">export class Gulpfile &#123;</span><br><span class="line">    @Task()</span><br><span class="line">    clean(cb: Function) &#123;</span><br><span class="line">        return del([&quot;.&#x2F;lib&#x2F;**&quot;], cb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Copies all sources to the package directory.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @MergedTask()</span><br><span class="line">    packageCompile() &#123;</span><br><span class="line">        const tsProject &#x3D; ts.createProject(&quot;tsconfig.json&quot;, &#123; typescript: require(&quot;typescript&quot;) &#125;);</span><br><span class="line">        const tsResult &#x3D; gulp.src([&quot;.&#x2F;src&#x2F;**&#x2F;*.ts&quot;, &quot;.&#x2F;node_modules&#x2F;@types&#x2F;**&#x2F;*.ts&quot;])</span><br><span class="line">            .pipe(sourcemaps.init())</span><br><span class="line">            .pipe(tsProject());</span><br><span class="line"></span><br><span class="line">        return [</span><br><span class="line">            tsResult.dts.pipe(gulp.dest(&quot;.&#x2F;lib&quot;)),</span><br><span class="line">            tsResult.js</span><br><span class="line">                .pipe(uglify())</span><br><span class="line">                .pipe(sourcemaps.write(&quot;.&quot;, &#123; sourceRoot: &quot;&quot;, includeContent: true &#125;))</span><br><span class="line">                .pipe(gulp.dest(&quot;.&#x2F;lib&quot;))</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SequenceTask()</span><br><span class="line">    package() &#123;</span><br><span class="line">        return [</span><br><span class="line">            &quot;clean&quot;,</span><br><span class="line">            &quot;packageCompile&quot;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、运行，以上面例子，输入下面命令即可运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp package</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在使用<strong>gulpfile.ts</strong>文件时，必须在项目的开发依赖（devDependencies）中安装<strong>ts-node</strong>模块，运行<code>gulp</code>命令时才能找到任务</p><ul><li><p>检查方法，在项目目录中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/gulp_version.png"></p><p>显示以上内容及安装正确，如有错误则异常，需检查安装是否正确</p></li><li><p>运行<code>gulp package</code>出现<code>Task &#39;package&#39; is not in your gulpfile</code>，则检查gulp的相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list gulp gulp-typescript gulpclass ts-node</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/typescript%E4%B8%8Bgulp%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC.png"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  使用gulp打包工具打包npm模块；使用gulp-typescript打包以typescript编写的npm模块&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiodra.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Gulp" scheme="http://xiodra.github.io/tags/Gulp/"/>
    
      <category term="打包" scheme="http://xiodra.github.io/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 学习</title>
    <link href="http://xiodra.github.io/posts/5a6465fb/"/>
    <id>http://xiodra.github.io/posts/5a6465fb/</id>
    <published>2018-08-20T07:46:25.000Z</published>
    <updated>2021-03-27T09:04:44.773Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  根据度娘，自己学习MongoDB安装，基本操作。</p><p>  为了封装MongoDB的数据操作而研究。</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="MongoDB-环境搭建文档说明"><a href="#MongoDB-环境搭建文档说明" class="headerlink" title="MongoDB 环境搭建文档说明"></a>MongoDB 环境搭建文档说明</h2><h4 id="1-安装（ZIP安装）"><a href="#1-安装（ZIP安装）" class="headerlink" title="1. 安装（ZIP安装）"></a>1. 安装（ZIP安装）</h4><p>  <a href="https://www.mongodb.com/download-center#community">Mongodb 下载中心</a></p><p>  <a href="http://dl.mongodb.org/dl/win32/x86_64">全版本下载中心</a> </p><ul><li><p>选在下载ZIP文件</p></li><li><p>将zip文件解压放到盘符的根目录（如C：或D：），为了方便建议文件夹命名尽量简短如（d:\mongodb）</p></li><li><p>创建数据库文件的存放位置，比如 <em><strong>d:/mongodb/data/db</strong></em> 。启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。</p></li><li><p>在 <strong>d:\mongodb\data</strong> 下新建文件夹 <strong>log</strong> （存放日志文件）并且新建文件 <strong>mongodb.log</strong> ;在 <em><strong>d:\mongodb</strong></em> 新建文件<strong>mongo.config</strong></p></li><li><p>用记事本打开 <strong>mongo.config</strong> 输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbpath&#x3D;D:\mongodb\data\db</span><br><span class="line">logpath&#x3D;D:\mongodb\data\log\mongo.log </span><br></pre></td></tr></table></figure></li><li><p>用管理员身份打开cmd命令行，进入 <em><strong>D:\mongodb\bin</strong></em> 目录，输入如下的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config D:\mongodb\mongo.config --install --bind_ip 0.0.0.0 --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p><strong><font color="red">PS: <code>bind_ip</code> 是4.0以后版本必须添加 <code>0.0.0.0</code>，这样远程才能访问该数据库，默认绑定 <code>127.0.0.1</code>，仅可本机访问  </font></strong></p></li><li><p>在服务中启动<strong>MongonDB</strong>，默认端口是27017</p></li></ul><h4 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h4><p>  增、删、查、改</p><blockquote><p>增加</p></blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.表名.insert(&#123;&#39;字段名&#39;:&#39;内容&#39;&#125;);</span><br><span class="line">db.表名.save(&#123;&#39;字段名&#39;:&#39;内容&#39;&#125;);</span><br></pre></td></tr></table></figure></code></pre><p>  <strong><font color="red">PS:_id可以自已插入、一个表中不一定要字段都相同，虽然 insert 和 save 方法都可以插入数据，当默认的“_id”值已存在时，调用insert方法插入会报错；而save方法不会,会更新相同的_id所在行数据的信息。</font></strong></p><blockquote><p>查</p></blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">大于：$gt</span><br><span class="line">小于：$lt</span><br><span class="line">大于等于：$gte</span><br><span class="line">小于等于：$lte</span><br><span class="line">非等于：$ne</span><br><span class="line">正则表达式</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">db.user.find(&#123;&#39;age&#39;:&#123;&#39;$gt&#39;:18&#125;&#125;);</span><br><span class="line">db.user.find(&#123;&#39;age&#39;:&#123;&#39;$lt&#39;:18&#125;&#125;);</span><br><span class="line">db.user.find(&#123;&#39;age&#39;:&#123;&#39;$gte&#39;:18&#125;&#125;);</span><br><span class="line">db.user.find(&#123;&#39;age&#39;:&#123;&#39;$lte&#39;:18&#125;&#125;);</span><br><span class="line">db.user.find(&#123;&#39;age&#39;:&#123;&#39;$ne&#39;:18&#125;&#125;);</span><br><span class="line">db.user.find(&#123;&#39;name&#39;:&#x2F;燕&#x2F;&#125;)</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>查询第一条</p></blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.表名.findOne(条件);</span><br><span class="line">eg:</span><br><span class="line">db.user.findOne(&#123;&#39;name&#39;:&#39;Tom&#39;&#125;)</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>分页查询</p></blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.表名.find(条件).skip(跳过数量).limit(查找数量);</span><br><span class="line">eg:</span><br><span class="line">db.user.find().skip(0).limit(100);</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>批量操作</p></blockquote><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Example of a simple bulkWrite operation</span><br><span class="line"></span><br><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient,</span><br><span class="line">  test &#x3D; require(&#39;assert&#39;);</span><br><span class="line">MongoClient.connect(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;test&#39;, function(err, db) &#123;</span><br><span class="line">  &#x2F;&#x2F; Get the collection</span><br><span class="line">  var col &#x3D; db.collection(&#39;bulk_write&#39;);</span><br><span class="line">  col.bulkWrite([</span><br><span class="line">      &#123; insertOne: &#123; document: &#123; a: 1 &#125; &#125; &#125;</span><br><span class="line">    , &#123; updateOne: &#123; filter: &#123;a:2&#125;, update: &#123;$set: &#123;a:2&#125;&#125;, upsert:true &#125; &#125;</span><br><span class="line">    , &#123; updateMany: &#123; filter: &#123;a:2&#125;, update: &#123;$set: &#123;a:2&#125;&#125;, upsert:true &#125; &#125;</span><br><span class="line">    , &#123; deleteOne: &#123; filter: &#123;c:1&#125; &#125; &#125;</span><br><span class="line">    , &#123; deleteMany: &#123; filter: &#123;c:1&#125; &#125; &#125;</span><br><span class="line">    , &#123; replaceOne: &#123; filter: &#123;c:3&#125;, replacement: &#123;c:4&#125;, upsert:true&#125;&#125;]</span><br><span class="line">  , &#123;ordered:true, w:1&#125;, function(err, r) &#123;</span><br><span class="line">    test.equal(null, err);</span><br><span class="line">    test.equal(1, r.nInserted);</span><br><span class="line">    test.equal(2, r.nUpserted);</span><br><span class="line">    test.equal(0, r.nRemoved);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Crud fields</span><br><span class="line">    test.equal(1, r.insertedCount);</span><br><span class="line">    test.equal(1, Object.keys(r.insertedIds).length);</span><br><span class="line">    test.equal(1, r.matchedCount);</span><br><span class="line">    test.ok(r.modifiedCount &#x3D;&#x3D; 0 || r.modifiedCount &#x3D;&#x3D; 1);</span><br><span class="line">    test.equal(0, r.deletedCount);</span><br><span class="line">    test.equal(2, r.upsertedCount);</span><br><span class="line">    test.equal(2, Object.keys(r.upsertedIds).length);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Ordered bulk operation</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre><h4 id="3-MongoDB导入导出以及数据库备份"><a href="#3-MongoDB导入导出以及数据库备份" class="headerlink" title="3. MongoDB导入导出以及数据库备份"></a>3. MongoDB导入导出以及数据库备份</h4><ul><li><ol><li>MongoDB数据导入与导出</li></ol><ul><li><p>1）导出工具：mongoexport</p><ul><li><p>1、概念：</p><p>  mongoDB中的mongoexport工具可以把一个collection导出成JSON格式或CSV格式的文件。可以通过参数指定导出的数据项，也可以根据指定的条件导出数据。</p></li><li><p>2、语法：</p><p>  <code>mongoexport -d dbname -c collectionname -o file --type json/csv -f field</code></p><blockquote><p>参数说明：<br>   -d ：数据库名<br>   -c ：collection名<br>   -o ：输出的文件名<br>   –type ： 输出的格式，默认为json<br>   -f ：输出的字段，如果-type为csv，则需要加上-f “字段名”</p></blockquote></li><li><p>3、示例：</p><p>  <code>sudo mongoexport -d mongotest -c users -o /home/python/Desktop/mongoDB/users.json --type json -f  &quot;_id,user_id,user_name,age,status&quot;</code></p></li></ul></li><li><p>2） 数据导入：mongoimport</p><ul><li><p>1、语法：</p><p>  <code>mongoimport -d dbname -c collectionname --file filename --headerline --type json/csv -f field</code></p><blockquote><p>参数说明：</p></blockquote><blockquote><p>   -d ：数据库名</p></blockquote><blockquote><p>   -c ：collection名</p></blockquote><blockquote><p>   –type ：导入的格式默认json</p></blockquote><blockquote><p>   -f ：导入的字段名</p></blockquote><blockquote><p>   –headerline ：如果导入的格式是csv，则可以使用第一行的标题作为导入的字段</p></blockquote><blockquote><p>   –file ：要导入的文件</p></blockquote></li><li><p>2、示例：</p><p>  <code>sudo mongoimport -d mongotest -c users --file /home/mongodump/articles.json --type json</code></p></li></ul></li></ul></li><li><ol start="2"><li>MongoDB备份与恢复</li></ol><ul><li>1）MongoDB数据库备份<ul><li><p>1、语法：</p><p>  <code>mongodump -h dbhost -d dbname -o dbdirectory</code></p><blockquote><p>参数说明：</p></blockquote><blockquote><p>   -h： MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p></blockquote><blockquote><p>   -d： 需要备份的数据库实例，例如：test</p></blockquote><blockquote><p>   -o： 备份的数据存放位置，例如：/home/mongodump/，当然该目录需要提前建立，这个目录里面存放&gt;该数据库实例的备份数据。</p></blockquote></li><li><p>2、实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf &#x2F;home&#x2F;momgodump&#x2F;</span><br><span class="line">sudo mkdir -p &#x2F;home&#x2F;momgodump</span><br><span class="line">sudo mongodump -h 192.168.17.129:27017 -d itcast -o &#x2F;home&#x2F;mongodump&#x2F;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>2）MongoDB数据库恢复</p><ul><li><p>1、语法：</p><p><code>mongorestore -h dbhost -d dbname --dir dbdirectory</code></p><blockquote><p>参数或名：</p></blockquote><blockquote><p>   -h： MongoDB所在服务器地址</p></blockquote><blockquote><p>   -d： 需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p></blockquote><blockquote><p>   –dir： 备份数据所在位置，例如：/home/mongodump/itcast/</p></blockquote><blockquote><p>   –drop： 恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用！</p></blockquote></li><li><p>2、实例：</p><p><code>mongorestore -h 192.168.17.129:27017 -d itcast_restore --dir /home/mongodump/itcast/</code></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  根据度娘，自己学习MongoDB安装，基本操作。&lt;/p&gt;
&lt;p&gt;  为了封装MongoDB的数据操作而研究。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://xiodra.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="MongoDB" scheme="http://xiodra.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>React-native 学习</title>
    <link href="http://xiodra.github.io/posts/fa532f8b/"/>
    <id>http://xiodra.github.io/posts/fa532f8b/</id>
    <published>2018-08-20T05:53:38.000Z</published>
    <updated>2021-03-27T09:18:51.995Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  React-native在windows下的安装及android端下遇到的一些问题解决方法</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h1 id="1-React-Native"><a href="#1-React-Native" class="headerlink" title="1. React Native"></a>1. React Native</h1><h3 id="1-0-1-环境搭建"><a href="#1-0-1-环境搭建" class="headerlink" title="1.0.1. 环境搭建"></a>1.0.1. <a href="https://reactnative.cn/docs/0.51/getting-started.html">环境搭建</a></h3><ul><li><p>Python 2.7</p></li><li><p>Java SDK（1.8+）</p></li><li><p>Android SDK</p><ul><li><p>设置</p><ul><li><p>Tools/Android SDK Tools</p></li><li><p>Tools/Android SDK Platform-tools</p></li><li><p>Tools/Android SDK Build-tools (23.0.1)（这个必须版本严格匹配23.0.1）</p></li><li><p>Android 6.0 (API 23)/SDK Platform (1)</p></li><li><p>Extras/Android Support Library</p></li><li><p>Extras/Android Support Repository</p></li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiodra/Media/images/AndroidSDK.png"></p><ul><li><p>Node.js</p><ul><li>镜像切换模块<code>npm install -g nrm</code></li><li>查看当前镜像<code>nrm list</code></li><li>切换镜像<code>nrm use taobao</code></li><li>测速<code>nrm test</code></li></ul></li><li><p>React-Native命令行工具<code>npm i -g react-native-cli</code></p></li></ul><h3 id="1-0-2-Hello-Word"><a href="#1-0-2-Hello-Word" class="headerlink" title="1.0.2. Hello Word"></a>1.0.2. Hello Word</h3><ul><li><p>创建项目<code>react-native init MyHelloWord</code><br><strong><font color="red">PS：等待数（或数十）分钟</font></strong></p></li><li><p>运行packager<code>react-native start</code><br><strong><font color="red">PS：可以用浏览器访问<a href="http://localhost:8081/index.bundle?platform=android%E7%9C%8B%E7%9C%8B%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84%E8%84%9A%E6%9C%AC%EF%BC%88%E7%9C%8B%E5%88%B0%E5%BE%88%E9%95%BF%E7%9A%84js%E4%BB%A3%E7%A0%81%E5%B0%B1%E5%AF%B9%E4%BA%86%EF%BC%89">http://localhost:8081/index.bundle?platform=android看看是否可以看到打包后的脚本（看到很长的js代码就对了）</a></font></strong></p></li><li><p>运行模拟器</p><ul><li><p>推荐使用BlueStacks不过要小心它推送的广告和垃圾应用。<br>如果有真机，可以不必运行模拟器，要配置好驱动，使得adb devices可以看到对应的设备。</p></li><li><p>Android Virsual Device</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Android\sdk\tools\emulator.exe <span class="literal">-netdelay</span> none <span class="literal">-netspeed</span> full <span class="literal">-avd</span> Nexus_5X_API_19</span><br></pre></td></tr></table></figure><p><code>D:\Android\sdk</code>Android Studio 目录<br><code>Nexus_5X_API_19</code>是我的模拟器的名称，具体名称，可以打开android studio查看</p></li></ul></li><li><p>Android 运行<code>react-native run-android</code><br><strong><font color="red">保持packager开启，另外打开一个命令行窗口，然后在工程目录下运行</font></strong></p></li></ul><h3 id="1-0-3-设备测试"><a href="#1-0-3-设备测试" class="headerlink" title="1.0.3. 设备测试"></a>1.0.3. 设备测试</h3><ul><li><a href="https://www.npmjs.com/package/react-native-camera">摄像头</a><code>react-native-camera</code><ul><li><code>npm install react-native-camera</code></li><li><code>react-native link react-native-camera</code></li><li>添加权限<blockquote><p><em><strong>android</strong></em>,路径<code>android/app/src/main/AndroidManifest.xml</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.CAMERA&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.RECORD_AUDIO&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.READ_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; &#x2F;&gt;  </span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.VIBRATE&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>iOS</strong></em>,待续</p></blockquote></li><li><strong>修改部分</strong><blockquote><p><code>android/build.gradle</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#39;com.android.tools.build:gradle:3.1.3&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">        maven &#123;</span><br><span class="line">          url &quot;$rootDir&#x2F;..&#x2F;node_modules&#x2F;react-native&#x2F;android&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123; url &quot;https:&#x2F;&#x2F;jitpack.io&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https:&#x2F;&#x2F;maven.google.com&quot; &#125;</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>android/gradle/wrapper/gradle-wrapper.properties</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">distributionUrl&#x3D;https\:&#x2F;&#x2F;services.gradle.org&#x2F;distributions&#x2F;gradle-4.4-all.zip</span><br></pre></td></tr></table></figure><blockquote><p><code>android/app/src/build.gradle</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile (project(&#39;:react-native-camera&#39;)) &#123;</span><br><span class="line">        exclude group: &quot;com.android.support&quot;, module: &#39;support-v4&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    compile(&#39;com.google.android.gms:play-services-vision:10.2.0&#39;) &#123;</span><br><span class="line">        force &#x3D; true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>  <strong><font color="red">1、以上步骤后，尝试构建项目<code>react-native run-android</code><br>2、使用Android Studio打开<code>android</code>，构建项目，根据提示解决错误，但警告是由于android api造成异常，等android解决后修复<br>3、最后添加使用相机的代码</font></strong></p><ul><li><p><a href="https://blog.csdn.net/yeputi1015/article/details/70187748">WebView</a></p><p>根据该篇文章进行测试</p></li></ul><h3 id="1-0-4-问题"><a href="#1-0-4-问题" class="headerlink" title="1.0.4. 问题"></a>1.0.4. 问题</h3><ul><li>Andriod SDK 设置要花很长时间</li><li>Android SDK Build-tools 必须包含 （<em><strong>23.0.1</strong></em>）</li><li><code>Unable to resolve module some-module from /Users/username/projectname/AwesomeProject/index.js: Invalid directory /Users/node_modules/some-module</code>根据<a href="https://github.com/facebook/react-native/issues/4968">Git</a>方法解决</li></ul><h3 id="1-0-5-整合ios，android，web（编外）"><a href="#1-0-5-整合ios，android，web（编外）" class="headerlink" title="1.0.5. 整合ios，android，web（编外）"></a>1.0.5. 整合ios，android，web（编外）</h3><ul><li><p><strong>react-web</strong>，淘宝前端团队开发的一个可以把react-native转换成web的工具, 大体上能实现了移动端的iOS/安卓/移动web这三端的代码共用</p></li><li><p><strong>react-native-web</strong>，twitter维护，使用<code>webpack</code>的灵活配置，实现了<code>**.web.js</code>和<code>Platform.OS===&#39;web&#39;</code>这样的平台代码，实现三端代码共用</p></li><li><p><strong>react-web</strong>依赖于<strong>react-native-web</strong>实现，在<em>github</em>中<em>README.md</em>文件有注明，但是<strong>react-native-web</strong>目前版本是 <em><strong>0.8.0</strong></em>，而<strong>react-web</strong>版本已经更新 <em><strong>1.1.3</strong></em>，不过<strong>react-web</strong>只在中国正式在生成环境运行中。</p></li><li><p>各种平台存在自己的差异性，不能完全兼容</p></li><li><p>该要改的还是要改，该要重写的还是要重写</p></li></ul><h3 id="1-0-6-End"><a href="#1-0-6-End" class="headerlink" title="1.0.6. End"></a>1.0.6. End</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  React-native在windows下的安装及android端下遇到的一些问题解决方法&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://xiodra.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安装" scheme="http://xiodra.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="React Native" scheme="http://xiodra.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>SS（R）服务器搭建</title>
    <link href="http://xiodra.github.io/posts/30a3e016/"/>
    <id>http://xiodra.github.io/posts/30a3e016/</id>
    <published>2018-08-20T05:46:34.000Z</published>
    <updated>2021-03-27T09:04:44.779Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  个人收录的两种SS（R）服务搭建方法</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="SS-R-服务搭建"><a href="#SS-R-服务搭建" class="headerlink" title="SS(R) 服务搭建"></a>SS(R) 服务搭建</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><ul><li><p>Step 1：执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">.&#x2F;shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure></li><li><p>Step 2: 输入密码</p></li><li><p>Step 3：输入端口</p></li><li><p>Step 4: 设置加密方式</p></li><li><p>Step 5: 协议</p></li><li><p>Step 6：插件</p></li><li><p>Step 7: 重启</p></li><li><p>卸载<code>./shadowsocks-go.sh uninstall</code></p></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><ul><li><p>Step 1：执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;softs.fun&#x2F;Bash&#x2F;ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubi&#x2F;doubi&#x2F;master&#x2F;ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>运行<code>bash ssr.sh</code>进入快捷管理界面</p></li><li><p>Step 2: 按界面指令进行安装</p></li></ul><h3 id="一键加速VPS服务器"><a href="#一键加速VPS服务器" class="headerlink" title="一键加速VPS服务器"></a>一键加速VPS服务器</h3><ul><li>Step 1: 执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">.&#x2F;bbr.sh</span><br></pre></td></tr></table></figure></li><li>Step 2: 重启</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  个人收录的两种SS（R）服务搭建方法&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiodra.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="安装" scheme="http://xiodra.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="VPS" scheme="http://xiodra.github.io/tags/VPS/"/>
    
      <category term="SSR" scheme="http://xiodra.github.io/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>node.js安装</title>
    <link href="http://xiodra.github.io/posts/63a2d85/"/>
    <id>http://xiodra.github.io/posts/63a2d85/</id>
    <published>2018-08-20T00:50:52.000Z</published>
    <updated>2021-03-27T09:04:44.786Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  本文主要介绍的是在windows 10下采用nvm进行安装node.js。</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h3 id="1-NVM-Windows-安装"><a href="#1-NVM-Windows-安装" class="headerlink" title="1. NVM-Windows 安装"></a>1. NVM-Windows 安装</h3><p>  <strong><a href="https://github.com/coreybutler/nvm-windows/releases">下载地址</a></strong></p><ul><li><p>在官网中下载最新版本的<code>nvm-noinstall.zip</code>,并解压至<code>C:\dev\nvm</code>目录下</p></li><li><p>以管理员身份打开<code>C:\dev\nvm</code>目录下的<code>install.cmd</code>文件,直接回车即可,然后在<code>C:\</code>目录下会出现<code>setting.text</code>文件,把该文件拷贝至<code>C:\dev\nvm</code>目录,并且将内容改成一下内容保存即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root: C:\dev\nvm </span><br><span class="line">path: C:\dev\nodejs </span><br><span class="line">arch: 64 </span><br><span class="line">proxy: none </span><br></pre></td></tr></table></figure></li><li><p>然后我配置环境变量，因为刚刚点击了<code>install.cmd</code>的文件，那么会在环境变量的系统变量中，生成两个环境变量：<code>NVM_HOME</code> 和 <code>NVM_SYMLINK</code> 我们开始修改这两个变量名的变量值：<code>NVM_HOME</code>的变量值为：<code>C:\dev\nvm</code>;<code>NVM_SYMLINK</code>的变量值为：<code>C:\dev\nodejs</code></p></li><li><p>我们还会发现，在<strong>Path</strong>中也会自动添加上<code>C:\dev\nvm;</code>或者是<code>C:\dev\nodejs</code>，如果有的话，把他们删掉，没有的话更好，我们自己来配置，在Path的最前面输入： <code>;%NVM_HOME%;%NVM_SYMLINK%;</code></p></li><li><p>打开一个cmd窗口输入命令：<code>nvm v </code>，那么我们会看到当前nvm的版本信息。然后我们可以安装nodejs了。</p></li><li><p><em><font color="red">PS&nbsp;以上目录可根据实际情况选择</font></em>*</p></li></ul><h3 id="2-nvm-node-js安装"><a href="#2-nvm-node-js安装" class="headerlink" title="2. nvm node.js安装"></a>2. nvm node.js安装</h3><ul><li><p>安装node：<code>nvm install latest</code>或者<code>nvm install 8.9.1 (32-bit)</code>默认<strong>64-bit</strong></p></li><li><p>查看node所有版本:<code>nvm list available</code></p></li><li><p>查看当前系统node版本:<code>nvm list</code></p></li><li><p>切换版本：<code>nvm use 8.9.1</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  本文主要介绍的是在windows 10下采用nvm进行安装node.js。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiodra.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="安装" scheme="http://xiodra.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="node.js" scheme="http://xiodra.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令说明</title>
    <link href="http://xiodra.github.io/posts/51566bcc/"/>
    <id>http://xiodra.github.io/posts/51566bcc/</id>
    <published>2018-08-17T04:43:55.000Z</published>
    <updated>2021-03-27T09:04:44.783Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Excerpt in index | 首页摘要&gt;</p><p>  个人平时使用较多的Git命令收录。</p><span id="more"></span><p>&lt;The rest of contents | 余下全文&gt;</p><h1 id="Git-命令说明"><a href="#Git-命令说明" class="headerlink" title="Git 命令说明"></a>Git 命令说明</h1><!-- TOC --><ul><li><a href="#git-%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E">Git 命令说明</a><ul><li><a href="#1-%E5%85%A8%E5%B1%80user-name-%E5%92%8Cemail%E8%AE%BE%E7%BD%AE">1. 全局user name 和email设置</a></li><li><a href="#2-%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5">2. 生成SSH密钥</a></li><li><a href="#3-%E5%A6%82%E4%BD%95%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0git">3. 如何用命令将本地项目上传到git</a></li><li><a href="#4-%E5%A6%82%E4%BD%95%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0">4. 如何用命令将服务器项目下载到本地</a></li><li><a href="#5-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">5. 常用命令</a></li></ul></li></ul><!-- /TOC --><hr><h2 id="1-全局user-name-和email设置"><a href="#1-全局user-name-和email设置" class="headerlink" title="1. 全局user name 和email设置"></a>1. 全局user name 和email设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xiodra&quot;</span><br><span class="line">git config --global user.email &quot;y.dragon.hu@hotmail.com&quot;</span><br></pre></td></tr></table></figure><p>或者当前项目目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;xiodra&quot;</span><br><span class="line">git config user.email &quot;y.dragon.hu@hotmail.com&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="2-生成SSH密钥"><a href="#2-生成SSH密钥" class="headerlink" title="2. 生成SSH密钥"></a>2. 生成SSH密钥</h2><ul><li><p>查看ssh</p><p><code>cd ~/.ssh</code></p><p>如果没有密钥则不会有此文件夹，有则备份删除</p></li><li><p>生成ssh</p><p><code>ssh-keygen -t rsa -C &quot;y.dragon.hu@hotmail.com&quot;</code></p><p>按3个回车，密码为空。最后得到了两个文件：<em><strong>id_rsa</strong></em>和<em><strong>id_rsa.pub</strong></em></p></li><li><p>查看ssh-keygen</p><p><code>cat ~/.ssh/id_rsa.pub</code></p></li></ul><hr><h2 id="3-如何用命令将本地项目上传到git"><a href="#3-如何用命令将本地项目上传到git" class="headerlink" title="3. 如何用命令将本地项目上传到git"></a>3. 如何用命令将本地项目上传到git</h2><ul><li><p>（先进入项目文件夹）通过命令 **git init **把这个目录变成git可以管理的仓库</p><p><code>git init</code></p></li><li><p>把文件添加到版本库中，使用命令 <strong>git add .<strong>添加到暂存区里面去，不要忘记后面的小数点</strong>“.”</strong>，意为添加文件夹下的所有文件</p><p><code>git add .</code></p></li><li><p>用命令 <strong>git commit</strong>告诉Git，把文件提交到仓库。引号内为提交说明</p><p><code>git commit -m &quot;first commit&quot;</code></p></li><li><p>关联到远程库</p><p><code>git remote add origin 你的远程库地址</code></p></li><li><p>获取远程库与本地同步合并<strong>（如果远程库不为空必须做这一步，否则后面的提交会失败）</strong></p><p><code>git pull --rebase origin master</code></p></li><li><p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p><p><em><strong>执行此命令后会要求输入用户名、密码，验证通过后即开始上传</strong></em></p><p><code>git push -u origin master</code></p></li><li><p>状态查询</p><p><code>git status</code></p><p><em><strong>以上所有操作都是在进入项目文件夹操作</strong></em></p></li></ul><hr><h2 id="4-如何用命令将服务器项目下载到本地"><a href="#4-如何用命令将服务器项目下载到本地" class="headerlink" title="4. 如何用命令将服务器项目下载到本地"></a>4. 如何用命令将服务器项目下载到本地</h2><ul><li><p>使用 <strong>git clone</strong> 命令下载项目</p><p><code>git clone -b 分支名 项目git地址</code></p><p>或者直接下载master分支</p><p><code>git clone 项目git地址</code></p><p>或者指定下载目录</p><p><code>git clone 项目git地址 &quot;项目目录&quot;</code></p></li></ul><hr><h2 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5. 常用命令"></a>5. 常用命令</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repository&gt; --recursive 递归的方式克隆整个项目</span><br><span class="line">git submodule add &lt;repository&gt; &lt;path&gt; 添加子模块</span><br><span class="line">git submodule init 初始化子模块</span><br><span class="line">git submodule update 更新子模块</span><br><span class="line">git submodule foreach git pull 拉取所有子模块</span><br><span class="line">git submodule update --init --recursive 递归的方式克隆子模块项目</span><br><span class="line">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</span><br><span class="line">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</span><br></pre></td></tr></table></figure><p>  以下是添加 <em>.gitignore</em> 的步骤</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;备注&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;Excerpt in index | 首页摘要&amp;gt;&lt;/p&gt;
&lt;p&gt;  个人平时使用较多的Git命令收录。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiodra.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://xiodra.github.io/tags/Git/"/>
    
      <category term="命令" scheme="http://xiodra.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
